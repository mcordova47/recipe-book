-- File auto generated by purescript-bridge! --
module Types.Recipe where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, Number, String)
import Types.Measurement (Measurement)

import Prelude
import Data.Generic (class Generic)

newtype FoodId =
    FoodId Int

derive instance eqFoodId :: Eq FoodId
derive instance genericFoodId :: Generic FoodId
derive instance newtypeFoodId :: Newtype FoodId _

--------------------------------------------------------------------------------
_FoodId :: Iso' FoodId Int
_FoodId = _Newtype
--------------------------------------------------------------------------------
newtype Ingredient =
    Ingredient {
      id :: FoodId
    , name :: String
    , unitCost :: Number
    , unitType :: Measurement
    , amount :: Number
    , cupsToLbs :: Maybe Number
    }

derive instance eqIngredient :: Eq Ingredient
derive instance genericIngredient :: Generic Ingredient
derive instance newtypeIngredient :: Newtype Ingredient _

--------------------------------------------------------------------------------
_Ingredient :: Iso' Ingredient { id :: FoodId, name :: String, unitCost :: Number, unitType :: Measurement, amount :: Number, cupsToLbs :: Maybe Number}
_Ingredient = _Newtype

--------------------------------------------------------------------------------
newtype IngredientAmount =
    IngredientAmount {
      ingredient :: RecipeComponent
    , amount :: Number
    , unitType :: Measurement
    }

derive instance eqIngredientAmount :: Eq IngredientAmount
derive instance genericIngredientAmount :: Generic IngredientAmount
derive instance newtypeIngredientAmount :: Newtype IngredientAmount _

--------------------------------------------------------------------------------
_IngredientAmount :: Iso' IngredientAmount { ingredient :: RecipeComponent, amount :: Number, unitType :: Measurement}
_IngredientAmount = _Newtype

--------------------------------------------------------------------------------
newtype Recipe =
    Recipe {
      id :: FoodId
    , name :: String
    , category :: String
    , ingredients :: Array IngredientAmount
    , unitType :: Measurement
    , amount :: Number
    , directions :: String
    , cupsToLbs :: Maybe Number
    }

derive instance eqRecipe :: Eq Recipe
derive instance genericRecipe :: Generic Recipe
derive instance newtypeRecipe :: Newtype Recipe _

--------------------------------------------------------------------------------
_Recipe :: Iso' Recipe { id :: FoodId, name :: String, category :: String, ingredients :: Array IngredientAmount, unitType :: Measurement, amount :: Number, directions :: String, cupsToLbs :: Maybe Number}
_Recipe = _Newtype

--------------------------------------------------------------------------------
data RecipeComponent =
    IngredientComp Ingredient
  | RecipeComp Recipe

derive instance eqRecipeComponent :: Eq RecipeComponent
derive instance genericRecipeComponent :: Generic RecipeComponent

--------------------------------------------------------------------------------
_IngredientComp :: Prism' RecipeComponent Ingredient
_IngredientComp = prism' IngredientComp f
  where
    f (IngredientComp a) = Just $ a
    f _ = Nothing

_RecipeComp :: Prism' RecipeComponent Recipe
_RecipeComp = prism' RecipeComp f
  where
    f (RecipeComp a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------

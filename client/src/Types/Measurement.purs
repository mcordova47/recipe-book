-- File auto generated by purescript-bridge! --
module Types.Measurement where

import Data.Argonaut (class DecodeJson, decodeJson)
import Data.Argonaut.Core (caseJsonString)
import Data.Argonaut.Decode.Generic.Rep (genericDecodeJson, genericDecodeJsonWith)
import Data.Argonaut.Types.Generic.Rep (defaultEncoding)
import Data.Either (Either(..))
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))

import Prelude
import Data.Generic.Rep (class Generic)

data Measurement =
    Items
  | Volume VolumeMeasurement
  | Weight WeightMeasurement

derive instance eqMeasurement :: Eq Measurement
derive instance genericMeasurement :: Generic Measurement _

instance decodeJsonMeasurement :: DecodeJson Measurement where
  decodeJson = genericDecodeJsonWith defaultEncoding { valuesKey = "contents", unwrapSingleArguments = true }

--------------------------------------------------------------------------------
_Items :: Prism' Measurement Unit
_Items = prism' (\_ -> Items) f
  where
    f Items = Just unit
    f _ = Nothing

_Volume :: Prism' Measurement VolumeMeasurement
_Volume = prism' Volume f
  where
    f (Volume a) = Just $ a
    f _ = Nothing

_Weight :: Prism' Measurement WeightMeasurement
_Weight = prism' Weight f
  where
    f (Weight a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data VolumeMeasurement =
    Cups
  | Tbsp
  | Tsp

derive instance eqVolumeMeasurement :: Eq VolumeMeasurement
derive instance genericVolumeMeasurement :: Generic VolumeMeasurement _

instance decodeJsonVolumeMeasurement :: DecodeJson VolumeMeasurement where
  decodeJson =
    caseJsonString (Left "Unexpected json value") $ case _ of
      "Cups" -> Right Cups
      "Tbsp" -> Right Tbsp
      "Tsp" -> Right Tsp
      str -> Left ("Unexpected tag: " <> str)

--------------------------------------------------------------------------------
_Cups :: Prism' VolumeMeasurement Unit
_Cups = prism' (\_ -> Cups) f
  where
    f Cups = Just unit
    f _ = Nothing

_Tbsp :: Prism' VolumeMeasurement Unit
_Tbsp = prism' (\_ -> Tbsp) f
  where
    f Tbsp = Just unit
    f _ = Nothing

_Tsp :: Prism' VolumeMeasurement Unit
_Tsp = prism' (\_ -> Tsp) f
  where
    f Tsp = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data WeightMeasurement =
    Lbs
  | Oz
  | Grams

derive instance eqWeightMeasurement :: Eq WeightMeasurement
derive instance genericWeightMeasurement :: Generic WeightMeasurement _

instance decodeJsonWeightMeasurement :: DecodeJson WeightMeasurement where
  decodeJson =
    caseJsonString (Left "Unexpected json value") $ case _ of
      "Lbs" -> Right Lbs
      "Oz" -> Right Oz
      "Grams" -> Right Grams
      str -> Left ("Unexpected tag: " <> str)

--------------------------------------------------------------------------------
_Lbs :: Prism' WeightMeasurement Unit
_Lbs = prism' (\_ -> Lbs) f
  where
    f Lbs = Just unit
    f _ = Nothing

_Oz :: Prism' WeightMeasurement Unit
_Oz = prism' (\_ -> Oz) f
  where
    f Oz = Just unit
    f _ = Nothing

_Grams :: Prism' WeightMeasurement Unit
_Grams = prism' (\_ -> Grams) f
  where
    f Grams = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
